{"version":3,"file":"freedom.min.js","mappings":"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","sources":["webpack:///../utils/generic.ts","webpack:///../utils/element.ts","webpack:///./src/utils/vdom.ts","webpack:///./src/freedom.ts","webpack:///./src/utils/misc.ts"],"sourcesContent":["/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function randoma2Z(length :number) :string{ //52\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 52);\r\n        if(r > 25) s += String.fromCharCode(r + 71);\r\n        else s += String.fromCharCode(r + 65);\r\n    }\r\n    return s;\r\n}\r\nexport function randoma2z029(length :number) :string{ //36\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 36);\r\n        if(r < 10) s += r;\r\n        else s += String.fromCharCode(r + 87);\r\n    }\r\n    return s;\r\n}\r\nexport function precisePop(ele :any, array :any[]) :any[] | null{\r\n    if(array.indexOf(ele) === -1) return null;\r\n    return array.splice(array.indexOf(ele), 1);\r\n}\r\n//递归冻结对象\r\nexport function constantize(obj :anyObject) :void{\r\n    Object.freeze(obj);\r\n    for(let i = 0; i < Object.keys(obj).length; i++) if(typeof obj[Object.keys(obj)[i]] == \"object\") constantize(obj[Object.keys(obj)[i]]);\r\n}\r\nexport function E(argument :string, type? :string, value? :any, reason? :string) :never{\r\n    if(argument === undefined) throw new Error(\"An error occured.\");\r\n    else{\r\n        console.error(argument, type, value, reason); //为了拿到真正的value，其他类型toString后啥信息都没了\r\n        throw new Error(`Argument '${argument}' ${type ? `should be a(an) ${type}` : \"is invalid\"}${reason ? `, reason: ${reason}` : \"\"}${value ? `, got ${value}` : \"\"}.`);\r\n    }\r\n}\r\nexport function EE(message :any) :never{throw new Error(message);}\r\nexport function repeat(item :any, count :number) :any[]{\r\n    if(typeof count != \"number\" || count < 1) utils.generic.E(\"count\", \"number smaller than 1\", count);\r\n    var arr :any[] = [];\r\n    arr[count - 1] = \" \";\r\n    return arr.fill(item, 0, count);\r\n}","/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function e(s :string, scope? :Element | Document) :Node[] | Node{\r\n    if(scope === undefined || !(scope instanceof Element)) scope = document;\r\n        let a :NodeList = scope.querySelectorAll(s);\r\n        if(!a.length) return [];\r\n        //note:当一个页面存在相同ID元素时不会走这里，而会返回数组，因为说好了是querySelectorAll了并且本来就不应该有重复ID，不能怪我啊\r\n        if(a.length == 1 && s.match(/^.*#[^\\s]*$/)) return a[0];\r\n        else return Array.from(a);\r\n}\r\nexport function isDescendant(possibleDescendant :Element, possibleParent :Element) :boolean{\r\n    while(possibleDescendant.tagName != \"HTML\"){\r\n        possibleDescendant = possibleDescendant.parentNode! as Element;\r\n        if(possibleDescendant === possibleParent) return true; \r\n    }\r\n    return false;\r\n}\r\nexport function isInDocument(element :Element) :boolean{\r\n    return isDescendant(element, (e(\"html\") as Node[])[0] as Element);\r\n}\r\nexport function isChild(element :Element, target :Element) :boolean{\r\n    const children = target.childNodes;\r\n    for(let i = 0; i < children.length; i++) if(element === children[i]) return true;\r\n    return false;\r\n}\r\nexport function toHTML(HTML :string) :Node[]{\r\n    if(HTML === \"\" || typeof HTML != \"string\") utils.generic.E(\"HTML\", \"string\", HTML);\r\n    const ele = document.createElement(\"div\");\r\n    ele.innerHTML = HTML;\r\n    return getInnerNodes(ele);\r\n}\r\nexport function getInnerNodes(el :Node | Element) :Node[]{\r\n    var nodes :Node[] = [];\r\n    for(let i = 0; i < el.childNodes.length; i++) nodes[i] = el.childNodes[i].cloneNode(true);\r\n    return nodes;\r\n}\r\n//剥壳器\r\nexport function hatch(element :Element, remove? :boolean) :Node[]{\r\n    //note:Nodelist类型会实时同步造成不稳定的for循环，必须转换为Node[]！\r\n    const par = element.parentElement!, children :Node[] = Array.from(element.childNodes);\r\n    for(let i = 0; i < children.length; i++) par.insertBefore(children[i], element);\r\n    if(remove === true) element.remove();\r\n    return children;\r\n}\r\n//fixme:这个方法特异性太强了吧，能不能不要放在这里？\r\n//最终渲染方法，老祖宗求你别出bug\r\nexport function render(HTML :string | Element | HTMLCollection | Element[] | Node | NodeList | Node[], element :Element, insertAfter? :boolean, append? :boolean, disableDF? :boolean) :Node[]{\r\n    if(element.parentElement === null) utils.generic.EE(\"cannot render by '<html>' element, since it's root of document.\");\r\n    var html :Node[] = [];\r\n    if(typeof HTML == \"string\") html = toHTML(HTML);\r\n    else if(HTML instanceof Element || HTML instanceof Node) html[0] = HTML.cloneNode(true);\r\n    else if(HTML instanceof HTMLCollection || HTML instanceof NodeList) for(let i = 0; i < HTML.length; i++) html[i] = HTML.item(i)!.cloneNode(true);\r\n    else html = HTML;\r\n    const Rhtml = [...html].reverse(), parent = element.parentElement;\r\n    if(append === true) for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    else if(append === false) for(let i = 0; i < Rhtml.length; i++) element.prepend(Rhtml[i]);\r\n    else if(insertAfter === true){\r\n        if(!element.nextSibling) for(let i = 0; i < Rhtml.length; i++) parent!.append(Rhtml[i]);\r\n        else for(let i = 0; i < Rhtml.length; i++) parent!.insertBefore(Rhtml[i], element.nextSibling);\r\n    }\r\n    else if(insertAfter === false) for(let i = 0; i < html.length; i++) parent!.insertBefore(html[i], element);\r\n    else for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    //todo:加入作用域\r\n    return html;\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\nfunction testNodeType(node :Node) :\"Text\" | \"Element\" | false{\r\n    if(node instanceof Text) return \"Text\";\r\n    else if(node instanceof Element) return \"Element\";\r\n    else return false;\r\n}\r\nfunction isVElement(input :any) :boolean{\r\n    return(\r\n        typeof input == \"object\"\r\n     && \"id\" in input\r\n     && \"tagName\" in input\r\n     && \"attrs\" in input\r\n     && \"children\" in input\r\n     && \"instance\" in input\r\n    );\r\n}\r\nfunction processNLIText(textNode :Text) :string | null{\r\n    const textContent = textNode.textContent!,\r\n          pContent = textContent.replace(/\\n\\s+/g, \" \"), //插入空格，保持视觉效果\r\n          parent = textNode.parentElement as Element; //replace不改动原字符串\r\n    const shouldKeepNLI = parent.tagName == \"TEXTAREA\" || (parent instanceof HTMLElement && parent.isContentEditable); //排除可编辑内容的元素的内容\r\n    if(!shouldKeepNLI && pContent === \"\"){ //完全就是垃圾节点\r\n        textNode.remove();\r\n        return null;\r\n    }\r\n    else if(!shouldKeepNLI && pContent !== textContent){ //部分垃圾\r\n        textNode.textContent = pContent; //更新文本节点\r\n        return pContent;\r\n    }\r\n    else return textContent;\r\n}\r\nexport function createVElement(tagName :string, attrs? :SSkvObject | null, children? :childrenArray, instance? :Element) :vElement{\r\n    return{\r\n        id: utils.generic.randoma2Z(15),\r\n        tagName: tagName.toLocaleLowerCase(), //fixed:我是傻逼\r\n        attrs: attrs || null,\r\n        children: children || null,\r\n        instance: instance || null\r\n    };\r\n}\r\n/**`null` 仅在垃圾文本节点会出现*/\r\nexport function parseNode(node :Node) :vElement | string | null{\r\n    const test = testNodeType(node);\r\n    if(test == \"Text\") return processNLIText(node as Text);\r\n    else if(test == \"Element\"){\r\n        const element = node as Element;\r\n        return createVElement(element.tagName, extractAttr(element), getChildren(element), element);\r\n    }\r\n    else{\r\n        utils.generic.E(\"node\", \"Element | Text\" , node);\r\n        return \"\"; //hack:ts真无聊\r\n    }\r\n}\r\n/****临时导出方法**\r\n * 测试完成后请及时取消导出\r\n*/\r\nexport function extractAttr(element :Element) :SSkvObject | null{\r\n    const test = testNodeType(element);\r\n    if(test == \"Text\" || test === false) utils.generic.E(\"element\", \"Element\", element, \"only Element have attributes\"); //文本节点不存在attr\r\n    const attr = element.attributes; //typeof NamedNodeMap\r\n    var result :SSkvObject = {};\r\n    for(let i = 0; i < attr.length; i++) result[attr[i].name] = attr[i].textContent!;\r\n    //fixed:已经通过修改addEventListener完成\r\n    //不能获取元素通过addEventListener绑定的事件\r\n    if(Object.keys(result).length === 0) return null;\r\n    else return result;\r\n}\r\nfunction generateAttr(element :Element, data :vElement) :void{\r\n    const attrs = data.attrs;\r\n    for(let i in attrs){\r\n        //todo:别忘了事件\r\n    }\r\n}\r\nfunction getChildren(element :Element/* | Text*/) :childrenArray | undefined{\r\n    const children :NodeList = element.childNodes;\r\n    //argument_solved:用NodeList能避免出现错误，并且可以获得尽可能最新的列表。\r\n    var result :vDOM[] = [];\r\n    for(let i = 0; i < children.length; i++){\r\n        const item = children.item(i);\r\n        if(item === null){ //这里可以避免缺陷for循环，因为i是对的，一个Element的childNodes不可能item出非Node，走到这里的唯一可能就是NodeList出缺陷了\r\n            console.warn(\"DOM structure was changed during freeDOM is parsing nodes. Please avoid that.\");\r\n            continue;\r\n        }\r\n        else parseNode(item); //fixed:我是傻逼，放着现成的parse不用 //递归产生处\r\n    }\r\n    if(result.length === 0) return undefined;\r\n    else return result;\r\n}\r\nfunction generateChildren(element :Element, data :vElement) :void{\r\n    if(data.children === null) return;\r\n    else{\r\n        const children = data.children;\r\n        for(let i = 0; i < children.length; i++) buildNode(children[i]); //递归产生处\r\n    }\r\n}\r\nexport function buildNode(vElement :vElement | string) :instance{\r\n    if(isVElement(vElement)){\r\n        vElement = vElement as vElement; //ts真无聊\r\n        const instance = document.createElement(vElement.tagName);\r\n        generateAttr(instance, vElement);\r\n        generateChildren(instance, vElement);\r\n        return instance;\r\n    }\r\n    else if(typeof vElement == \"string\") return document.createTextNode(vElement);\r\n    else{\r\n        utils.generic.E(\"vElement\", \"vElement\", vElement);\r\n        return new Element(); //hack:ts真无聊\r\n    }\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../utils/index\";\r\nimport * as localUtils from \"./utils/index\";\r\nconsole.info(\"freeDOM ©LJM12914. https://github.com/openink/freeDOM \\r\\nYou are using an unminified version of freeDOM, which is not suitable for production use.\");\r\nvar instances :FreeDOM[] = [];\r\nconst Ep = Element.prototype;\r\n(Ep as anyObject).oddEventListener = Ep.addEventListener;\r\nEp.addEventListener = new Proxy((Ep as anyObject).oddEventListener, {\r\n    apply(oEL :Function, callerElement :Element, argArray :[]){\r\n        //todo:获取事件\r\n        return Reflect.apply(oEL, callerElement, argArray);\r\n    }\r\n});\r\nclass FreeDOM{\r\n    #rootNode :Element;\r\n    #vDOMTree? :vElement; //hack:ts真无聊\r\n    #options? :fdOptions;\r\n    constructor(rootNode :Elementy, options? :fdOptions){\r\n        console.info(\"creating new FreeDOM instance with rootNode\", rootNode, \"and options\", options);\r\n        rootNode = localUtils.misc.reduceToElement(rootNode);\r\n        this.#rootNode = rootNode;\r\n        const tree = localUtils.vDOM.parseNode(rootNode);\r\n        if(typeof tree == \"string\" || tree === null) utils.generic.E(\"rootNode\", \"Element | string\", rootNode, \"rootNode should be an Element or a #id selector\");\r\n        else this.#vDOMTree = tree;\r\n        this.#options = options;\r\n        instances.push(this); //记录实例\r\n/**/}\r\n//////API\r\n/**///utils那边都做了检测了，这边只管调用\r\n    //创建vDOM\r\n    c(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    createNode(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    createElement(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    createVElement(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    h(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    createVNode(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    createNodeDescription(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(tagName, attrs, children);\r\n    }\r\n    //结束 创建vDOM\r\n    p(node :Node) :vElement | string | null{\r\n        return localUtils.vDOM.parseNode(node);\r\n    }\r\n    parseNode(node :Node) :vElement | string | null{\r\n        return localUtils.vDOM.parseNode(node);\r\n    }\r\n    b(vElement :vElement | string) :instance{\r\n        return localUtils.vDOM.buildNode(vElement);\r\n    }\r\n    buildNode(vElement :vElement | string) :instance{\r\n        return localUtils.vDOM.buildNode(vElement);\r\n    }\r\n    s(){\r\n\r\n    }\r\n    sync(){\r\n\r\n    }\r\n    r(){\r\n\r\n    }\r\n    rsync(){\r\n        \r\n    }\r\n    __extractAttr__(element :Element) :SSkvObject | null{\r\n        return localUtils.vDOM.extractAttr(element);\r\n    }\r\n/**/\r\n//////工具方法\r\n/**/e(s :string, scope? :Element | Document) :Node | Node[]{return utils.element.e(s, scope);}\r\n}\r\nutils.generic.constantize(FreeDOM);\r\n(window as anyObject).FreeDOM = FreeDOM;","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\nexport function reduceToElement(input :Elementy) :Element{\r\n    if(input instanceof Element) return input;\r\n    else if(typeof input == \"string\"){\r\n        const el = utils.element.e(input);\r\n        if(el instanceof Node) return el as Element;\r\n    }\r\n    else utils.generic.E(\"rootNode\", \"string | Element\", input, \"rootNode should be a #id selector or an Element\");\r\n    return new Element(); //hack:ts真无聊\r\n}"],"names":["randoma2Z","length","s","i","r","Math","floor","random","String","fromCharCode","E","argument","type","value","reason","undefined","Error","e","scope","Element","document","a","querySelectorAll","match","Array","from","testNodeType","node","Text","createVElement","tagName","attrs","children","instance","id","toLocaleLowerCase","parseNode","test","textNode","textContent","pContent","replace","parent","parentElement","shouldKeepNLI","HTMLElement","isContentEditable","remove","processNLIText","element","extractAttr","childNodes","result","item","getChildren","attr","attributes","name","Object","keys","buildNode","vElement","input","createElement","data","generateAttr","generateChildren","createTextNode","instances","Ep","prototype","oddEventListener","addEventListener","Proxy","apply","oEL","callerElement","argArray","Reflect","FreeDOM","constructor","rootNode","options","el","Node","this","tree","push","c","createNode","h","createVNode","createNodeDescription","p","b","sync","rsync","__extractAttr__","constantize","obj","freeze","window"],"sourceRoot":""}