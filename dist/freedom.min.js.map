{"version":3,"file":"freedom.min.js","mappings":"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","sources":["webpack:///../utils/generic.ts","webpack:///../utils/element.ts","webpack:///./src/utils/vdom.misc.ts","webpack:///./src/utils/vdom.build.ts","webpack:///./src/utils/vdom.ts","webpack:///./src/utils/vdom.get.ts","webpack:///./src/freedom.ts","webpack:///./src/utils/misc.ts","webpack:///./src/freedom.export.ts"],"sourcesContent":["/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function randoma2Z(length :number) :string{ //52\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 52);\r\n        if(r > 25) s += String.fromCharCode(r + 71);\r\n        else s += String.fromCharCode(r + 65);\r\n    }\r\n    return s;\r\n}\r\nexport function randoma2z029(length :number) :string{ //36\r\n    var s :string = \"\";\r\n    for(let i = 0; i < length; i++){\r\n        let r = Math.floor(Math.random() * 36);\r\n        if(r < 10) s += r;\r\n        else s += String.fromCharCode(r + 87);\r\n    }\r\n    return s;\r\n}\r\nexport function precisePop(ele :any, array :any[]) :any[] | null{\r\n    if(array.indexOf(ele) === -1) return null;\r\n    return array.splice(array.indexOf(ele), 1);\r\n}\r\n//递归冻结对象\r\nexport function constantize(obj :anyObject) :void{\r\n    Object.freeze(obj);\r\n    for(let i = 0; i < Object.keys(obj).length; i++) if(typeof obj[Object.keys(obj)[i]] == \"object\") constantize(obj[Object.keys(obj)[i]]);\r\n}\r\nexport function E(argument :string, type? :string, value? :any, reason? :string) :never{\r\n    if(argument === undefined) throw new Error(\"An error occured.\");\r\n    else{\r\n        console.info(\"ERROR INFO: argument\", argument, \",type\", type, \",value\", value, \",reason\", reason); //为了拿到真正的value，其他类型toString后啥信息都没了\r\n        throw new Error(`Argument '${argument}' ${type ? `should be a(an) ${type}` : \"is invalid\"}${reason ? `, reason: ${reason}` : \"\"}${value ? `, got ${value}` : \"\"}.`);\r\n    }\r\n}\r\nexport function EE(message :any) :never{throw new Error(message);}\r\nexport function repeat(item :any, count :number) :any[]{\r\n    if(typeof count != \"number\" || count < 1) utils.generic.E(\"count\", \"number smaller than 1\", count);\r\n    var arr :any[] = [];\r\n    arr[count - 1] = \" \";\r\n    return arr.fill(item, 0, count);\r\n}","/* utils\r\n * ©2022 LJM12914. https://github.com/wheelsmake/utils\r\n * Licensed under MIT License. https://github.com/wheelsmake/utils/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"./index\";\r\nexport function e(s :string, scope? :Element | Document) :Node[] | Node{\r\n    if(scope === undefined || !(scope instanceof Element)) scope = document;\r\n        let a :NodeList = scope.querySelectorAll(s);\r\n        if(!a.length) return [];\r\n        //note:当一个页面存在相同ID元素时不会走这里，而会返回数组，因为说好了是querySelectorAll了并且本来就不应该有重复ID，不能怪我啊\r\n        if(a.length == 1 && s.match(/^.*#[^\\s]*$/)) return a[0];\r\n        else return Array.from(a);\r\n}\r\nexport function isDescendant(possibleDescendant :Element, possibleParent :Element) :boolean{\r\n    while(possibleDescendant.tagName != \"HTML\"){\r\n        possibleDescendant = possibleDescendant.parentNode! as Element;\r\n        if(possibleDescendant === possibleParent) return true; \r\n    }\r\n    return false;\r\n}\r\nexport function isInDocument(element :Element) :boolean{\r\n    return isDescendant(element, (e(\"html\") as Node[])[0] as Element);\r\n}\r\nexport function isChild(element :Element, target :Element) :boolean{\r\n    const children = target.childNodes;\r\n    for(let i = 0; i < children.length; i++) if(element === children[i]) return true;\r\n    return false;\r\n}\r\nexport function toHTML(HTML :string) :Node[]{\r\n    if(HTML === \"\" || typeof HTML != \"string\") utils.generic.E(\"HTML\", \"string\", HTML);\r\n    const ele = document.createElement(\"div\");\r\n    ele.innerHTML = HTML;\r\n    return getInnerNodes(ele);\r\n}\r\nexport function getInnerNodes(el :Node | Element) :Node[]{\r\n    var nodes :Node[] = [];\r\n    for(let i = 0; i < el.childNodes.length; i++) nodes[i] = el.childNodes[i].cloneNode(true);\r\n    return nodes;\r\n}\r\n//剥壳器\r\nexport function hatch(element :Element, remove? :boolean) :Node[]{\r\n    //note:Nodelist类型会实时同步造成不稳定的for循环，必须转换为Node[]！\r\n    const par = element.parentElement!, children :Node[] = Array.from(element.childNodes);\r\n    for(let i = 0; i < children.length; i++) par.insertBefore(children[i], element);\r\n    if(remove === true) element.remove();\r\n    return children;\r\n}\r\n//fixme:这个方法特异性太强了吧，能不能不要放在这里？\r\n//最终渲染方法，老祖宗求你别出bug\r\nexport function render(HTML :string | Element | HTMLCollection | Element[] | Node | NodeList | Node[], element :Element, insertAfter? :boolean, append? :boolean, disableDF? :boolean) :Node[]{\r\n    if(element.parentElement === null) utils.generic.EE(\"cannot render by '<html>' element, since it's root of document.\");\r\n    var html :Node[] = [];\r\n    if(typeof HTML == \"string\") html = toHTML(HTML);\r\n    else if(HTML instanceof Element || HTML instanceof Node) html[0] = HTML.cloneNode(true);\r\n    else if(HTML instanceof HTMLCollection || HTML instanceof NodeList) for(let i = 0; i < HTML.length; i++) html[i] = HTML.item(i)!.cloneNode(true);\r\n    else html = HTML;\r\n    const Rhtml = [...html].reverse(), parent = element.parentElement;\r\n    if(append === true) for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    else if(append === false) for(let i = 0; i < Rhtml.length; i++) element.prepend(Rhtml[i]);\r\n    else if(insertAfter === true){\r\n        if(!element.nextSibling) for(let i = 0; i < Rhtml.length; i++) parent!.append(Rhtml[i]);\r\n        else for(let i = 0; i < Rhtml.length; i++) parent!.insertBefore(Rhtml[i], element.nextSibling);\r\n    }\r\n    else if(insertAfter === false) for(let i = 0; i < html.length; i++) parent!.insertBefore(html[i], element);\r\n    else for(let i = 0; i < html.length; i++) element.append(html[i]);\r\n    //todo:加入作用域\r\n    return html;\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\nexport function testNodeType(node :Node) :\"Text\" | \"Element\" | false{\r\n    if(node instanceof Text) return \"Text\";\r\n    else if(node instanceof Element) return \"Element\";\r\n    else return false;\r\n}\r\nexport function isVText(input :any) :boolean{\r\n    return(\r\n        typeof input == \"object\"\r\n     && \"id\" in input\r\n     && \"text\" in input\r\n     && \"instance\" in input\r\n     && Object.keys(input).length == 3\r\n    );\r\n}\r\nexport function isVElement(input :any) :boolean{\r\n    return(\r\n        typeof input == \"object\"\r\n     && \"id\" in input\r\n     && \"tagName\" in input\r\n     && \"attrs\" in input\r\n     && \"events\" in input\r\n     && \"children\" in input\r\n     && \"instance\" in input\r\n     && Object.keys(input).length == 6\r\n    );\r\n}\r\n/****!PURE 非纯函数**\r\n * \r\n * 检测某个文本节点是否为垃圾文本节点（即缩进造成的文本节点）\r\n * \r\n * 这种文本节点会造成 vDOM 大小明显变大，必须处理\r\n * \r\n * 如果全部垃圾，那么就直接删除这个节点并返回 `null`\r\n * \r\n * 如果不完全垃圾，那么删除垃圾部分并返回剩下的 `textContent`\r\n * \r\n * 如果没有垃圾或**被判定为豁免节点**，那么直接返回 `textContent`\r\n */\r\nexport function processNLIText(textNode :Text) :string | null{\r\n    //fixme:存在末尾\\n文本节点被浏览器自动加回去的问题（但并未影响vDOM）\r\n    const textContent = textNode.textContent!,\r\n          //这个是用来标记原字符串是否需要处理的\r\n          signContent = textContent.replace(/\\n\\s*/g, \"\"), //只有\\n也要删\r\n          parent = textNode.parentElement as Element; //replace不改动原字符串\r\n    //排除可编辑内容的元素的内容\r\n    if(parent.tagName == \"TEXTAREA\" || (parent instanceof HTMLElement && parent.isContentEditable)) return textContent;\r\n    else{\r\n        if(signContent === \"\"){ //完全就是垃圾节点\r\n            textNode.remove();\r\n            return null;\r\n        }\r\n        else if(signContent !== textContent){ //部分垃圾\r\n            textNode.textContent = textContent.replace(/\\n\\s*/g, \" \"); //更新文本节点，插入空格，保持视觉效果\r\n            return textNode.textContent; //fixed:signContent和textContent都不一样，干嘛返回signContent啊\r\n        }\r\n        else return textContent; //没有垃圾\r\n    }\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\nimport * as misc from \"./vdom.misc\";\r\n\r\n//全量\r\nexport function Attr(element :Element, data :vElement) :void{\r\n    const attrs = data.attrs;\r\n    for(let i in attrs) deltaAttr(element, i, attrs[i]);\r\n}\r\nexport function Event(element :Element, data :vElement){\r\n    //todo:\r\n}\r\nexport function Children(element :Element, data :vElement) :void{\r\n    if(data.children === null) return;\r\n    else{\r\n        const children = data.children;\r\n        for(let i = 0; i < children.length; i++) deltaChildren(element, children[i]); //递归产生处\r\n    }\r\n}\r\n\r\n//增量\r\nexport function deltaAttr(element :Element, key :string, value :string) :void{\r\n    element.setAttribute(key, value);\r\n}\r\nexport function deltaEvent(element :Element) :void{\r\n    //todo:\r\n    \r\n}\r\nexport function deltaChildren(element :Element, childrenVDOM :vDOM) :void{\r\n    element.appendChild(localUtils.vDOM.buildNode(childrenVDOM));\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\n\r\n//本地导入\r\nimport * as misc from \"./vdom.misc\";\r\nimport * as get from \"./vdom.get\";\r\nimport * as build from \"./vdom.build\";\r\nimport * as diff from \"./vdom.diff\";\r\n\r\nexport * as misc from \"./vdom.misc\";\r\nexport * as get from \"./vdom.get\";\r\nexport * as build from \"./vdom.build\";\r\nexport * as diff from \"./vdom.diff\";\r\n\r\nexport function createVElement(\r\n        id :string,\r\n        tagName :string,\r\n        attrs :SSkvObject | null,\r\n        events :eventRecord | null,\r\n        children :childrenArray,\r\n        instance :Element | null\r\n    ) :vElement{\r\n    if(typeof tagName != \"string\") utils.generic.E(\"tagName\", \"string\", tagName);\r\n    //不完整验证\r\n    if(attrs !== null && attrs.toString() != \"[object Object]\") utils.generic.E(\"attrs\", \"SSkvObject\", attrs);\r\n    if(events !== null && events.toString() != \"[object Object]\") utils.generic.E(\"events\", \"eventRecord\", events);\r\n    if(children !== null && !(children instanceof Array)) utils.generic.E(\"children\", \"childrenArray\", children);\r\n    if(instance !== null && !(instance instanceof Element)) utils.generic.E(\"instance\", \"Element\", instance);\r\n    return{\r\n        id,\r\n        tagName: tagName.toLocaleLowerCase(), //fixed:我是傻逼\r\n        attrs,\r\n        events,\r\n        children: children,\r\n        instance\r\n    };\r\n}\r\nexport function createVText(id :string, text :string, instance :Text | null) :vText | void{\r\n    //不完整验证\r\n    if(instance !== null && !(instance instanceof Text)) utils.generic.E(\"instance\", \"Text\", instance);\r\n    if(typeof text == \"string\") return{\r\n        id,\r\n        text,\r\n        instance\r\n    };\r\n    else utils.generic.E(\"text\", \"string | null\" , text);\r\n}\r\n/**`null` 仅在垃圾文本节点会出现*/\r\nexport function parseNode(node :Node) :vDOM | void{\r\n    const test = misc.testNodeType(node), id = utils.generic.randoma2Z(15);\r\n    if(test == \"Text\"){\r\n        const textNode = node as Text,\r\n              NLIresult = misc.processNLIText(textNode);\r\n        if(NLIresult !== null) return createVText(id, NLIresult , textNode)!;\r\n        //fixed:太多方法将null作为错误返回值了，其实应该返回void的\r\n    }\r\n    else if(test == \"Element\"){\r\n        const element = node as Element,\r\n              result = createVElement(id, element.tagName, get.Attr(element), get.Event(element), get.Children(element), element);\r\n        return result;\r\n    }\r\n    else utils.generic.E(\"node\", \"instance\" , node);\r\n}\r\nexport function buildNode(vDOM :vDOM) :instance{\r\n    if(misc.isVElement(vDOM)){\r\n        vDOM = vDOM as vElement; //ts真无聊\r\n        const instance = document.createElement(vDOM.tagName);\r\n        build.Attr(instance, vDOM);\r\n        build.Event(instance, vDOM);\r\n        build.Children(instance, vDOM);\r\n        return instance;\r\n    }\r\n    else if(misc.isVText(vDOM)){\r\n        vDOM = vDOM as vText; //ts真无聊\r\n        return document.createTextNode(vDOM.text);\r\n    }\r\n    else{\r\n        utils.generic.E(\"vDOM\", \"vDOM\", vDOM);\r\n        return new Element(); //ts真无聊\r\n    }\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\n//这个东西不能导出，否则ts会无法编译\r\nimport * as FreeDOM from \"../freedom\";\r\nimport * as misc from \"./vdom.misc\";\r\nexport function Attr(element :Element) :SSkvObject | null{\r\n    const test = misc.testNodeType(element);\r\n    if(test == \"Text\" || test === false) utils.generic.E(\"element\", \"Element\", element, \"only Element have attributes\"); //文本节点不存在attr\r\n    const attr = element.attributes; //typeof NamedNodeMap\r\n    var result :SSkvObject = {};\r\n    for(let i = 0; i < attr.length; i++) result[attr[i].name] = attr[i].textContent!; //只要传入已有name就不会出null\r\n    if(Object.keys(result).length === 0) return null;\r\n    else return result;\r\n}\r\nexport function Event(node :Element) :eventRecord | null{\r\n    //fixed:这边可以这样写，通过import/export的FreeDOM.eventStore传回的就是eventStore本身，具有关联性\r\n    if(FreeDOM.eventStore.has(node)){\r\n        //浅复制eventStore，等于是保存元素当前的事件状态快照\r\n        //浅复制即可，浏览器删除事件监听器时不会销毁对象\r\n        const record = FreeDOM.eventStore.get(node)!, result :anyObject = {}; //ts真无聊\r\n        for(let eventName in record){\r\n            result[eventName] = [];\r\n            for(let i = 0; i < record[eventName].length; i++) result[eventName][i] = record[eventName][i];\r\n                //只需要复制到这里，参数对象内部无需遍历即可保持快照状态\r\n                /*for(let member in record[eventName][i]){\r\n                    result[eventName][i][member] = (record[eventName][i] as anyObject)[member]; //ts真无聊\r\n                */\r\n        }\r\n        return result;\r\n    }\r\n    else return null;\r\n}\r\nexport function Children(element :Element/* | Text*/) :childrenArray{\r\n    const children :Node[] = Array.from(element.childNodes);\r\n    //argument_solved 2022.7.31:只能用Node[]，因为垃圾文本节点会被删除造成必然缺陷。\r\n    var result :vDOM[] = [];\r\n    for(let i = 0; i < children.length; i++){\r\n        const item = children[i];\r\n        if(item === null){ //这里可以避免缺陷for循环，因为i是对的，一个Element的childNodes不可能item出非Node，走到这里的唯一可能就是NodeList出缺陷了\r\n            console.warn(\"DOM structure was changed during freeDOM's parsing nodes. Please avoid that.\");\r\n            continue;\r\n        }\r\n        const test = misc.testNodeType(item);\r\n        if(test == \"Element\") result.push(localUtils.vDOM.parseNode(item)!); //递归产生处，Element不会null\r\n        else if(test == \"Text\"){\r\n            const node = localUtils.vDOM.parseNode(item); //递归产生处\r\n            if(node !== undefined) result.push(node!);\r\n            //else void表示垃圾文本节点已经被删除，不需要记录了\r\n        }\r\n        //else 应该永远不会走到这里吧\r\n    }\r\n    //fixed:直接返回数组不就不用判定了吗？\r\n    return result;\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../utils/index\";\r\nimport * as localUtils from \"./utils/index\";\r\n\r\n//开发模式记录\r\nconsole.info(\"freeDOM ©LJM12914. https://github.com/openink/freeDOM \\r\\nYou are using an unminified version of freeDOM, which is not suitable for production use.\");\r\n\r\n//事件捕获相关hack变量\r\nconst instances :ScopeInstance[] = [], eventStore :eventStore = new Map(); //Map浏览器支持率＞96% on 2022.7.23\r\nexport {instances, eventStore}; //暴露这两个变量给utils\r\n\r\n//hack addEventListener\r\n//不能用window.onload，实际上它是最迟执行的\r\nconst Ep = Element.prototype, Ep_A = Ep as anyObject;\r\n\r\nEp_A.oddEventListener = Ep.addEventListener;\r\nEp.addEventListener = new Proxy(Ep_A.oddEventListener, {\r\n    apply(\r\n        oEL :Function,\r\n        callerElement :Element,\r\n        argArray :[string, Function, boolean | AddEventListenerOptions | undefined, boolean | undefined]\r\n        //第四个参数兼容wantUntrusted\r\n    ){\r\n        //note:不需要检查type是否合法，因为存在自定义事件的可能；选择记录所有HTML DOM的所有事件，其实也不多\r\n        //console.log(callerElement, argArray);\r\n        const [eventName, handler, arg1, arg2] = argArray,\r\n              record = eventStore.get(callerElement),\r\n              useCapture = arg1 !== undefined ? typeof arg1 == \"boolean\" ? arg1 : arg1.capture || false : false; //适应调用参数https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#syntax\r\n        var processedHandler :Function;\r\n        if(typeof arg1 == \"object\" && arg1[\"once\"] === true){ //处理once情况，调用后立即删除\r\n            processedHandler = new Proxy(handler, {\r\n                apply(target, thisArg, argArray){\r\n                    //console.log(processedHandler);\r\n                    //不知道record会不会保存之前的值，我们还是再获取一遍吧\r\n                    const recordValue = eventStore.get(callerElement)![eventName]; //既然运行了这个方法就不可能是undefined\r\n                    //还是得找才能删除\r\n                    for(let i = 0; i < recordValue.length; i++){\r\n                        const thisArg1 = recordValue[i].arg1,\r\n                              thisUseCapture = thisArg1 !== undefined ? typeof thisArg1 == \"boolean\" ? thisArg1 : thisArg1.capture || false : false; //适应调用参数L32\r\n                        if(recordValue[i].handler === processedHandler && thisUseCapture === useCapture){\r\n                            utils.generic.precisePop(recordValue[i], recordValue);\r\n                        }\r\n                    }\r\n                    return Reflect.apply(target, thisArg, argArray);\r\n                }\r\n            });\r\n        }\r\n        else processedHandler = handler;\r\n        if(record !== undefined){ //本元素已被记录\r\n            if(record[eventName] === undefined){\r\n                record[eventName] = [{ //本元素未有该事件，新建数组\r\n                    handler: processedHandler, arg1, arg2\r\n                }];\r\n                argArray[1] = processedHandler; //同L80\r\n            }\r\n            else{  //本元素已有该事件\r\n                /* note:排除会被浏览器丢弃的调用。\r\n                 * 浏览器将type、handler和useCapture完全一致listener认为是同一个，不管其他参数是否相同。\r\n                 * 所以我们需要在这里比较handler和useCapture是否一致，如果没找到完全一致的listener就需要存新的listener\r\n                 * 否则浏览器不会更改已有listener，我们也不会对eventStore作更改\r\n                */\r\n                var isDuplicated = false; //为了能正常return的flag\r\n                //console.log(useCapture);\r\n                for(let i = 0; i < record[eventName].length; i++){\r\n                    const thisArg1 = record[eventName][i].arg1,\r\n                          thisUseCapture = thisArg1 !== undefined ? typeof thisArg1 == \"boolean\" ? thisArg1 : thisArg1.capture || false : false; //适应调用参数L32\r\n                    if(handler === record[eventName][i].handler && useCapture === thisUseCapture){ //找到了所谓完全一致的listener，走吧\r\n                        isDuplicated = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(!isDuplicated){\r\n                    record[eventName].push({\r\n                        handler: processedHandler, arg1, arg2\r\n                    });\r\n                    //这个不能放到最后，因为如果浏览器没有添加的话就会多出一个，必须在确保浏览器会添加这个事件后再修改参数\r\n                    argArray[1] = processedHandler;\r\n                }\r\n            }\r\n            eventStore.set(callerElement, record);\r\n        }\r\n        else{\r\n            eventStore.set(callerElement, { //本元素未被记录\r\n                [eventName]: [{\r\n                    handler: processedHandler, arg1, arg2\r\n                }]\r\n            });\r\n            argArray[1] = processedHandler; //同L80\r\n        }\r\n        return Reflect.apply(oEL, callerElement, argArray);\r\n    }\r\n});\r\n\r\nEp_A.oemoveEventListener = Ep.removeEventListener;\r\nEp.removeEventListener = new Proxy(Ep_A.oemoveEventListener, {\r\n    apply(\r\n        omEL :Function,\r\n        callerElement :Element,\r\n        argArray :[string, Function, boolean | AddEventListenerOptions | undefined]\r\n    ){\r\n        //console.log(callerElement, argArray);\r\n        const [eventName, handler, arg1] = argArray;\r\n        if(eventStore.has(callerElement)){ //本元素已被记录\r\n            const record = eventStore.get(callerElement)!,\r\n                  useCapture = arg1 !== undefined ? typeof arg1 == \"boolean\" ? arg1 : arg1.capture || false : false; //适应调用参数;\r\n            if(record[eventName] !== undefined){ //本元素已有该类型事件\r\n                /* note:识别真正会被浏览器移除的listener。\r\n                 * 对于大多数浏览器来说，会检查remove的type、handler和useCapture是否一致\r\n                 * 我们也是这样\r\n                 * 对于其他浏览器暂不做支持，因为需要查很多资料，留个todo:吧\r\n                 * https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/removeEventListener#:~:text=%E5%8F%AA%E6%9C%89%20capture%20%E9%85%8D%E7%BD%AE%E5%BD%B1%E5%93%8D%20removeEventListener().\r\n                */\r\n                for(let i = 0; i < record[eventName].length; i++){\r\n                    const thisArg1 = record[eventName][i].arg1,\r\n                          thisUseCapture = thisArg1 !== undefined ? typeof thisArg1 == \"boolean\" ? thisArg1 : thisArg1.capture || false : false; //适应调用参数\r\n                    if(handler === record[eventName][i].handler && useCapture === thisUseCapture) utils.generic.precisePop(record[eventName][i], record[eventName]); //存在对应handler，删除\r\n                }\r\n            }\r\n            //else 本类型事件未被记录，不管了\r\n            eventStore.set(callerElement, record);\r\n        }\r\n        //else 本元素未被记录，不知道调用者在干嘛\r\n        return Reflect.apply(omEL, callerElement, argArray);\r\n    }\r\n});\r\n\r\n//主类\r\nclass ScopeInstance{\r\n    #rootNode :Element;\r\n    #options? :fdOptions;\r\n    #oldVDOM :vElement;\r\n    #vDOM :vElement;\r\n    //#observer :MutationObserver;\r\n    #oldSearchStore :searchStore = [[],[],[]];\r\n    #searchStore :searchStore = [[],[],[]];\r\n    constructor(rootNode :Elementy, options? :fdOptions){\r\n        //开发模式记录\r\n        console.info(\"creating new freeDOM instance with rootNode\", rootNode, \"and options\", options);\r\n\r\n        //输入rootNode\r\n        rootNode = localUtils.misc.reduceToElement(rootNode);\r\n        this.#rootNode = rootNode;\r\n\r\n        //获取vDOM并检测其合法性\r\n        const tree = localUtils.vDOM.parseNode(rootNode);\r\n        if(localUtils.vDOM.misc.isVText(tree) || tree === null){\r\n            utils.generic.E(\"rootNode\", \"Elementy\", rootNode, \"rootNode should be an Element or a #id selector\");\r\n            throw new Error(); //ts真无聊，上一行代码就是抛出异常的，不会执行到这里的\r\n        }\r\n        else this.#vDOM = tree as vElement; //ts真无聊\r\n        this.#oldVDOM = this.#vDOM;\r\n        \r\n        //输入options\r\n        this.#options = options;\r\n\r\n        /*初始化DOM监测器\r\n        this.#observer = new MutationObserver(this.#observerCB);\r\n        this.#observer.observe(this.#rootNode, {\r\n            childList: true,\r\n            subtree: true,\r\n            characterData: true,\r\n            characterDataOldValue: true,\r\n            attributes: true,\r\n            attributeOldValue: true\r\n        });*/\r\n\r\n        //记录实例\r\n        instances.push(this);\r\n    }\r\n    /*DOM监测回调\r\n    #observerCB(mutations :MutationRecord[]) :void{\r\n        for(let i = 0; i < mutations.length; i++){\r\n            console.log(mutations[i]);\r\n            //\r\n        }\r\n    }*/\r\n    //属性获取\r\n    //note:get访问器返回值必须可以赋给set访问器\r\n    get rootNode() :Element{return this.#rootNode;}\r\n    get options() :fdOptions | undefined{return this.#options;}\r\n    get vDOM() :vElement | undefined{return this.#vDOM;}\r\n    //vDOM API\r\n    m(location :string | vElement, index :number | string, subTree :vDOM) :void{\r\n        const vDOM = this.#vDOM;\r\n        if(location !== vDOM.id) for(let i = 0; i < vDOM.children.length; i++){\r\n\r\n        }\r\n        else vDOM.children.splice(index as number, 0, subTree);\r\n    }\r\n    mount(location :string | vElement, index :number | string, subTree :vDOM) :void{return this.m(location, index, subTree);}\r\n    u(){\r\n\r\n    }\r\n    unmount(){\r\n        return this.u();\r\n    }\r\n    s(){\r\n\r\n    }\r\n    sync(){\r\n        return this.s();\r\n    }\r\n    r(){\r\n\r\n    }\r\n    rsync(){\r\n        return this.r();\r\n    }\r\n}\r\n\r\n//主对象\r\nconst FreeDOM = {\r\n//创建实例\r\n    new(rootNode: Elementy, options?: fdOptions) :ScopeInstance{\r\n        return new ScopeInstance(rootNode, options);\r\n    },\r\n//信息获取\r\n    get instances(){\r\n        /* 不能将instances直接传出！\r\n         * 第一：会暴露内部变量的地址；\r\n         * ???:第二，会奇怪地导致instances被自动取消可扩展性（Object.isExtensible(instances) === false），进而导致创建新实例无法记录\r\n         * 所以我们选择复制一份\r\n         */\r\n        return [...instances];\r\n    },\r\n    get eventStore(){\r\n        //问题同上第一条\r\n        return new Map(eventStore);\r\n    },\r\n//vDOM创建\r\n    c(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(utils.generic.randoma2Z(15), tagName, attrs || null, null, children || [], null);\r\n    },\r\n    createVElement(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(utils.generic.randoma2Z(15), tagName, attrs || null, null, children || [], null);\r\n    },\r\n    h(tagName :string, attrs? :SSkvObject | null, children? :childrenArray) :vElement{\r\n        return localUtils.vDOM.createVElement(utils.generic.randoma2Z(15), tagName, attrs || null, null, children || [], null);\r\n    },\r\n    t(text :string) :vText | null{\r\n        return localUtils.vDOM.createVText(utils.generic.randoma2Z(15), text, null) || null;\r\n    },\r\n    createVText(text :string) :vText | null{\r\n        return localUtils.vDOM.createVText(utils.generic.randoma2Z(15), text, null) || null;\r\n    },\r\n//vDOM与DOM的转换\r\n    p(node :Node) :vDOM | null{\r\n        const result = localUtils.vDOM.parseNode(node);\r\n        return result || null;\r\n    },\r\n    parseNode(node :Node) :vDOM | null{\r\n        const result = localUtils.vDOM.parseNode(node);\r\n        return result || null;\r\n    },\r\n    b(vElement :vDOM) :instance{\r\n        return localUtils.vDOM.buildNode(vElement);\r\n    },\r\n    buildNode(vElement :vDOM) :instance{\r\n        return localUtils.vDOM.buildNode(vElement);\r\n    },\r\n//vDOM对比\r\n    d(){\r\n        \r\n    },\r\n    diff(){\r\n\r\n    },\r\n//工具方法\r\n    e(s :string, scope? :Element | Document) :Node | Node[]{return utils.element.e(s, scope);},\r\n}\r\n\r\n//对象导出\r\nutils.generic.constantize(FreeDOM);\r\nexport default FreeDOM;","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport * as utils from \"../../../utils/index\";\r\nimport * as localUtils from \"./index\";\r\nexport function reduceToElement(input :Elementy) :Element{\r\n    if(input instanceof Element) return input;\r\n    else if(typeof input == \"string\"){\r\n        const el = utils.element.e(input);\r\n        if(el instanceof Node) return el as Element;\r\n        else utils.generic.E(\"rootNode\", \"string | Element\", input, \"rootNode should be a VALID #id selector\"); //fixed:现在不会走到new Element()那儿了\r\n    }\r\n    else utils.generic.E(\"rootNode\", \"string | Element\", input, \"rootNode should be a #id selector or an Element\");\r\n    return new Element(); //ts真无聊\r\n}\r\nexport function pushSearchStore(searchStore :searchStore, searchBlock :searchBlock) :void{\r\n    //id基本不可能重复，vDOM是独立object，不可能判定相等，由于一个\r\n}","/* freeDOM\r\n * ©2022 LJM12914. https://github.com/wheelsmake/freeDOM\r\n * Licensed under MIT License. https://github.com/wheelsmake/freeDOM/blob/main/LICENSE\r\n*/\r\nimport FreeDOM from \"./freedom\";\r\n//fixed:将freeDOM当作模块使用的时候不需要将它弄到全局作用域，所以将这个东西抽出来了\r\nObject.defineProperty(window, \"FreeDOM\", {\r\n    configurable: false,\r\n    writable: false,\r\n    enumerable: true,\r\n    value: FreeDOM\r\n});"],"names":["randoma2Z","length","s","i","r","Math","floor","random","String","fromCharCode","precisePop","ele","array","indexOf","splice","E","argument","type","value","reason","undefined","Error","e","scope","Element","document","a","querySelectorAll","match","Array","from","testNodeType","node","Text","isVText","input","Object","keys","deltaAttr","element","key","setAttribute","deltaChildren","childrenVDOM","appendChild","createVElement","id","tagName","attrs","events","children","instance","toString","toLocaleLowerCase","createVText","text","parseNode","test","textNode","NLIresult","textContent","signContent","replace","parent","parentElement","HTMLElement","isContentEditable","remove","result","attr","attributes","name","record","eventName","childNodes","item","push","buildNode","vDOM","createElement","data","createTextNode","instances","eventStore","Map","Ep","prototype","Ep_A","oddEventListener","addEventListener","Proxy","apply","oEL","callerElement","argArray","handler","arg1","arg2","get","useCapture","capture","processedHandler","target","thisArg","recordValue","thisArg1","thisUseCapture","Reflect","isDuplicated","set","oemoveEventListener","removeEventListener","omEL","has","ScopeInstance","constructor","rootNode","options","el","Node","this","tree","m","location","index","subTree","mount","u","unmount","sync","rsync","FreeDOM","new","c","h","t","p","b","vElement","d","diff","constantize","obj","freeze","defineProperty","window","configurable","writable","enumerable"],"sourceRoot":""}